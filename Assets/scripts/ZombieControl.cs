//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ZombieControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ZombieControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ZombieControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ZombieControl"",
    ""maps"": [
        {
            ""name"": ""ZombieMovement"",
            ""id"": ""1682bbd8-5862-4400-9a6f-adf77fb529a2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""85163f74-da4d-48c5-95a9-6c21c7c52ae1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""6031183d-c1b1-4f1d-a1b5-b99af7df618a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""8379dc7c-2d35-4e2e-ac5c-c963bac22207"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scream"",
                    ""type"": ""Button"",
                    ""id"": ""93322ed3-1476-460d-a8c6-2fe812c8dbf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // ZombieMovement
        m_ZombieMovement = asset.FindActionMap("ZombieMovement", throwIfNotFound: true);
        m_ZombieMovement_Movement = m_ZombieMovement.FindAction("Movement", throwIfNotFound: true);
        m_ZombieMovement_Run = m_ZombieMovement.FindAction("Run", throwIfNotFound: true);
        m_ZombieMovement_Attack = m_ZombieMovement.FindAction("Attack", throwIfNotFound: true);
        m_ZombieMovement_Scream = m_ZombieMovement.FindAction("Scream", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ZombieMovement
    private readonly InputActionMap m_ZombieMovement;
    private List<IZombieMovementActions> m_ZombieMovementActionsCallbackInterfaces = new List<IZombieMovementActions>();
    private readonly InputAction m_ZombieMovement_Movement;
    private readonly InputAction m_ZombieMovement_Run;
    private readonly InputAction m_ZombieMovement_Attack;
    private readonly InputAction m_ZombieMovement_Scream;
    public struct ZombieMovementActions
    {
        private @ZombieControl m_Wrapper;
        public ZombieMovementActions(@ZombieControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_ZombieMovement_Movement;
        public InputAction @Run => m_Wrapper.m_ZombieMovement_Run;
        public InputAction @Attack => m_Wrapper.m_ZombieMovement_Attack;
        public InputAction @Scream => m_Wrapper.m_ZombieMovement_Scream;
        public InputActionMap Get() { return m_Wrapper.m_ZombieMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ZombieMovementActions set) { return set.Get(); }
        public void AddCallbacks(IZombieMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_ZombieMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ZombieMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Scream.started += instance.OnScream;
            @Scream.performed += instance.OnScream;
            @Scream.canceled += instance.OnScream;
        }

        private void UnregisterCallbacks(IZombieMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Scream.started -= instance.OnScream;
            @Scream.performed -= instance.OnScream;
            @Scream.canceled -= instance.OnScream;
        }

        public void RemoveCallbacks(IZombieMovementActions instance)
        {
            if (m_Wrapper.m_ZombieMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IZombieMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_ZombieMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ZombieMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ZombieMovementActions @ZombieMovement => new ZombieMovementActions(this);
    public interface IZombieMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnScream(InputAction.CallbackContext context);
    }
}
